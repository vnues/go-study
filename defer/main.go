package main

import (
	"bufio"
	"fmt"
	"os"
)

func writeFile(filename string) {
	file, err := os.Create(filename)
	if err != nil {
		print(err)
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {

		}
	}(file)
	writer := bufio.NewWriter(file)
	defer func(writer *bufio.Writer) {
		err := writer.Flush()
		if err != nil {

		}
	}(writer)
	_, err = fmt.Fprintf(writer,
		"倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻倒海翻江时代峰峻")
	fmt.Printf("demo")
	return
}

// defer: 当程序执行一个函数时候，会将函数的上下文（输入参数，返回值，输出参数等信息）作为栈帧放在程序内存的栈中，当函数执行完成之后，设置返回值并返回，此时栈帧退出栈，函数才真正完成执行
// 执行一个异步函数 主函数（writeFile）会不会还在栈中
// go函数遇到return就会立即跳出调用栈吗 不等异步执行完？
// 明天问问公司的大佬
func main() {
	writeFile("demo.txt")
}
